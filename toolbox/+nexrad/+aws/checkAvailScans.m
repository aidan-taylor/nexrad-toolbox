function [missingScansPy, presentScansPy, missingScans, presentScans] = checkAvailScans(availScansPy, location, awsStructure)
	%CHECKAVAILSCANS Checks if scans are already downloaded to local drive.
	%
	% =================
	% INPUTS (Required)
	% =================
	%
	% availScansPy (1,N) py.list
	%		Python list containing the raw metadata for the available scans.
	%		This is a list of AwsNexradFile objects typically generated by
	%		nexrad.aws.queryAvailScans.
	%
	% =================
	% INPUTS (Optional)
	% =================
	%
	% location (1,1) string
	%		Path to the folder to check. Typically this will be the same folder
	%		the missing files will be downloaded to. By default this is the
	%		current folder.
	%
	% awsStructure (1,1) logical
	%		Checks AWS bucket folder structure if used (true, default). Checks
	%		only current folder (false).
	%
	% =======
	% OUTPUTS
	% =======
	%
	% missingScansPy (1,M) py.list
	%		Python list containing the raw metadata for the files not in the
	%		specifed folder
	%
	% presentScansPy (1,L) py.list
	%		Python list containing the raw metadata for the files present in the
	%		specifed folder
	%
	% missingScans (1,1) struct
	%		Structure containing the metadata for each of the missing scans.
	%		Fields are: awspath, key, scan_time, radar_id, filename.
	%
	% presentScans (1,1) struct
	%		Structure containing the metadata for each of the present scans.
	%		Fields are: awspath, key, scan_time, radar_id, filename.
	
	arguments
		availScansPy (1,:) py.list
		location (1,1) string = pwd;
		awsStructure (1,1) logical = true;
	end
	
	% For glob, we need to ensure the filesep is forward slash to prevent string codes
	location = strrep(location, '\', '/');
	
	% Run python code and return the missing scans
	[missingScansPy, presentScansPy] = pyrunfile("+nexrad/+aws/+resources/checkAvailScans.py", ...
		["missingScans", "presentScans"], availScans=availScansPy, location=location, awsStructure=awsStructure);
	
	% Convert information to matlab friendly format if desired (usually called with [~, ~, missingScans])
	if nargout > 2, missingScans = nexrad.conversions.pyAwsNexradFile(missingScansPy); end
	
	% Convert information to matlab friendly format if desired (usually called with [~, ~, ~, presentScans])
	if nargout > 3, presentScans = nexrad.conversions.pyAwsNexradFile(presentScansPy); end